<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>hs</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~H</string>
	<key>name</key>
	<string>Haskell</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>`.*`</string>
			<key>name</key>
			<string>entity.name.function.infix.haskell</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(otherwise|module|where|import|data|type|case|of|let|in|instance|deriving|class|newtype|default|hiding|as)\b</string>
			<key>name</key>
			<string>keyword.other.haskell</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(infixl|infixr)\b</string>
			<key>name</key>
			<string>keyword.operator.haskell</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(do|if|then|else)\b</string>
			<key>name</key>
			<string>keyword.control.haskell</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^\s*#\s*\w+</string>
			<key>name</key>
			<string>meta.preprocessor.haskell</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>string.quoted.double.haskell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.haskell</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>[^\w']'</string>
			<key>end</key>
			<string>'</string>
			<key>name</key>
			<string>string.quoted.single.haskell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.haskell</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(?=\s*[\(a-z][a-zA-Z0-9'\)]*\s*::)</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.function.initial.haskell</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[\(a-z][a-zA-Z0-9'\)]*(?=\s*::)</string>
					<key>name</key>
					<string>entity.name.function.haskell</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[\[\]a-zA-Z0-9,()]+</string>
					<key>name</key>
					<string>variable.parameter.haskell</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b[A-Z]\w*\b</string>
			<key>name</key>
			<string>constant.other.haskell</string>
		</dict>
		<dict>
			<key>match</key>
			<string>--.*</string>
			<key>name</key>
			<string>comment.line.double-dash.haskell</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>{-</string>
			<key>end</key>
			<string>-}</string>
			<key>name</key>
			<string>comment.block.haskell</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>::</string>
			<key>end</key>
			<string>$|(?=[;}])</string>
			<key>name</key>
			<string>storage.type.haskell</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(abs|acos|acosh|all|and|any|appendFile|applyM|asTypeOf|asin|asinh|atan|atan2|atanh|break|catch|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b</string>
			<key>name</key>
			<string>entity.name.function.builtin.prelude.haskell</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.haskell</string>
	<key>uuid</key>
	<string>5C034675-1F6D-497E-8073-369D37E2FD7D</string>
</dict>
</plist>
